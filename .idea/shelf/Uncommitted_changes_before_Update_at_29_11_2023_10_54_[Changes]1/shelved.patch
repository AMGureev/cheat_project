Index: src/main/kotlin/com/example/cheat_project/HelloController.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.cheat_project\r\n\r\nimport javafx.fxml.FXML\r\nimport javafx.fxml.FXMLLoader\r\nimport javafx.scene.Scene\r\nimport javafx.scene.control.Button\r\nimport javafx.scene.control.ChoiceBox\r\nimport javafx.scene.control.Label\r\nimport javafx.scene.control.TextField\r\nimport javafx.stage.Stage\r\nimport java.awt.Rectangle\r\nimport java.awt.Robot\r\nimport java.awt.Toolkit\r\nimport java.io.File\r\nimport javax.imageio.ImageIO\r\nimport java.time.LocalTime\r\nimport java.time.LocalDateTime\r\nimport java.time.format.DateTimeFormatter\r\n\r\nclass HelloController {\r\n    lateinit var toMenu2: Button\r\n    lateinit var connectButton: Button\r\n    lateinit var getCode: TextField\r\n    lateinit var back: Button\r\n    lateinit var codeInsertButton: Button\r\n    lateinit var codeGenButton: Button\r\n    @FXML\r\n    private lateinit var codeInsertText: TextField\r\n    @FXML\r\n    private lateinit var codeGenText: TextField\r\n    @FXML\r\n    private lateinit var welcomeText: Label\r\n    @FXML\r\n    private lateinit var nextButton: Button\r\n    @FXML\r\n    private lateinit var choiceBox: ChoiceBox<String>\r\n\r\n    private lateinit var code: String\r\n\r\n    @FXML\r\n    private fun onHelloButtonClick() {\r\n        nextButton.scene.window.hide()\r\n        val fxmlLoader : FXMLLoader\r\n        if (choiceBox.value == \"Отправитель\") {\r\n            fxmlLoader = FXMLLoader(HelloApplication::class.java.getResource(\"generate-code.fxml\"))\r\n        } else {\r\n            fxmlLoader = FXMLLoader(HelloApplication::class.java.getResource(\"input-code.fxml\"))\r\n        }\r\n        var scene = Scene(fxmlLoader.load(), 800.0, 600.0)\r\n        var stage = Stage()\r\n        stage.scene = scene\r\n        stage.show()\r\n    }\r\n\r\n    @FXML\r\n    private fun choiceBoxClick() {\r\n        nextButton.isDisable = false;\r\n    }\r\n\r\n    @FXML\r\n    private fun goBack() {\r\n        back.scene.window.hide()\r\n        val fxmlLoader = FXMLLoader(HelloApplication::class.java.getResource(\"hello-view.fxml\"))\r\n        val loader = fxmlLoader.getController<RecieverController>()\r\n        code = getCode.text\r\n        val scene = Scene(fxmlLoader.load(), 800.0, 600.0)\r\n        val stage = Stage()\r\n        stage.scene = scene\r\n        stage.show()\r\n    }\r\n\r\n    @FXML\r\n    private fun goToMenu() {\r\n        toMenu2.scene.window.hide()\r\n        val fxmlLoader = FXMLLoader(HelloApplication::class.java.getResource(\"hello-view.fxml\"))\r\n        val scene = Scene(fxmlLoader.load(), 800.0, 600.0)\r\n        val stage = Stage()\r\n        stage.scene = scene\r\n        stage.show()\r\n    }\r\n\r\n    @FXML\r\n    private fun generateCode() {\r\n        var code = \"\"\r\n        val allowedChars = ('A'..'Z') + ('a'..'z') + ('0'..'9')\r\n        code = (1..10).map { allowedChars.random() }.joinToString(\"\")\r\n        codeGenText.text = code;\r\n    }\r\n\r\n    @FXML\r\n    private fun inputCode() {\r\n        code = getCode.text\r\n        getCode.scene.window.hide()\r\n        val fxmlLoader = FXMLLoader(HelloApplication::class.java.getResource(\"getter-view.fxml\"))\r\n        val scene = Scene(fxmlLoader.load())\r\n        val stage = Stage()\r\n        stage.scene = scene\r\n        stage.setOnShown {\r\n            fxmlLoader.getController<RecieverController>().displayCode(code)\r\n        }\r\n        stage.show()\r\n    }\r\n    private fun screenShot() {\r\n        try {\r\n            val robot = Robot()\r\n            val screenSize = Toolkit.getDefaultToolkit().screenSize\r\n            val screenRect = Rectangle(screenSize)\r\n            val screenshot = robot.createScreenCapture(screenRect)\r\n            val outputFile = File(\"screenshot.png\")\r\n            ImageIO.write(screenshot, \"png\", outputFile)\r\n            println(\"Скриншот сохранен в: ${outputFile.absolutePath}\")\r\n        } catch (e: Exception) {\r\n            println(\"Ошибка при создании скриншота: ${e.message}\")\r\n        }\r\n    }\r\n\r\n    private fun checkCode(code: String): Boolean{\r\n        val timeNow = LocalTime.parse(LocalTime.now().toString(), DateTimeFormatter.ofPattern(\"H:m:ss\"))\r\n        val filename = File(\"databaseCode.txt\")\r\n        val bufferedReader = filename.bufferedReader()\r\n        val text:List<String> = bufferedReader.readLines()\r\n        for(line in text){\r\n            val keyAndTime = line.split(\" \").toTypedArray()\r\n            if (keyAndTime.elementAt(0) == code){\r\n                val endTime = LocalTime.parse(keyAndTime.elementAt(1), DateTimeFormatter.ofPattern(\"H:m:ss\"))\r\n                if (endTime >= timeNow){\r\n                    return true\r\n                }\r\n            }\r\n        }\r\n        return false\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/kotlin/com/example/cheat_project/HelloController.kt b/src/main/kotlin/com/example/cheat_project/HelloController.kt
--- a/src/main/kotlin/com/example/cheat_project/HelloController.kt	
+++ b/src/main/kotlin/com/example/cheat_project/HelloController.kt	
@@ -62,7 +62,6 @@
         back.scene.window.hide()
         val fxmlLoader = FXMLLoader(HelloApplication::class.java.getResource("hello-view.fxml"))
         val loader = fxmlLoader.getController<RecieverController>()
-        code = getCode.text
         val scene = Scene(fxmlLoader.load(), 800.0, 600.0)
         val stage = Stage()
         stage.scene = scene
@@ -100,6 +99,7 @@
         }
         stage.show()
     }
+    @FXML
     private fun screenShot() {
         try {
             val robot = Robot()
Index: src/main/resources/com/example/cheat_project/generate-code.fxml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n\r\n<?import javafx.scene.control.Button?>\r\n<?import javafx.scene.control.Label?>\r\n<?import javafx.scene.control.TextField?>\r\n<?import javafx.scene.layout.AnchorPane?>\r\n<?import javafx.scene.text.Font?>\r\n\r\n<AnchorPane prefHeight=\"468.0\" prefWidth=\"659.0\" xmlns=\"http://javafx.com/javafx/21\" xmlns:fx=\"http://javafx.com/fxml/1\" fx:controller=\"com.example.cheat_project.HelloController\">\r\n   <children>\r\n       <Label alignment=\"CENTER\" layoutX=\"296.0\" layoutY=\"169.0\" prefHeight=\"32.0\" prefWidth=\"67.0\" text=\"ИЛИ\" textAlignment=\"CENTER\">\r\n           <font>\r\n               <Font size=\"14.0\" />\r\n           </font>\r\n       </Label>\r\n   \r\n                <Button id=\"goToMainMenu\" fx:id=\"back\" layoutX=\"275.0\" layoutY=\"305.0\" onAction=\"#goBack\" prefHeight=\"38.0\" prefWidth=\"109.0\" text=\"Назад\" />\r\n      <TextField fx:id=\"codeGenText\" layoutX=\"81.0\" layoutY=\"160.0\" prefHeight=\"51.0\" prefWidth=\"194.0\" />\r\n      <TextField fx:id=\"codeInsertText\" layoutX=\"384.0\" layoutY=\"160.0\" prefHeight=\"51.0\" prefWidth=\"194.0\" promptText=\"Вставьте код\" />\r\n      <Button fx:id=\"codeGenButton\" onAction=\"#generateCode\" layoutX=\"95.0\" layoutY=\"251.0\" mnemonicParsing=\"false\" prefHeight=\"38.0\" prefWidth=\"159.0\" text=\"Сгенерировать код\" />\r\n      <Button fx:id=\"codeInsertButton\" layoutX=\"402.0\" layoutY=\"251.0\" mnemonicParsing=\"false\" prefHeight=\"38.0\" prefWidth=\"159.0\" text=\"Подключиться к сессии\" />\r\n   </children>\r\n</AnchorPane>\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/resources/com/example/cheat_project/generate-code.fxml b/src/main/resources/com/example/cheat_project/generate-code.fxml
--- a/src/main/resources/com/example/cheat_project/generate-code.fxml	
+++ b/src/main/resources/com/example/cheat_project/generate-code.fxml	
@@ -18,6 +18,6 @@
       <TextField fx:id="codeGenText" layoutX="81.0" layoutY="160.0" prefHeight="51.0" prefWidth="194.0" />
       <TextField fx:id="codeInsertText" layoutX="384.0" layoutY="160.0" prefHeight="51.0" prefWidth="194.0" promptText="Вставьте код" />
       <Button fx:id="codeGenButton" onAction="#generateCode" layoutX="95.0" layoutY="251.0" mnemonicParsing="false" prefHeight="38.0" prefWidth="159.0" text="Сгенерировать код" />
-      <Button fx:id="codeInsertButton" layoutX="402.0" layoutY="251.0" mnemonicParsing="false" prefHeight="38.0" prefWidth="159.0" text="Подключиться к сессии" />
+      <Button fx:id="codeInsertButton" onAction="#screenShot" layoutX="402.0" layoutY="251.0" mnemonicParsing="false" prefHeight="38.0" prefWidth="159.0" text="Подключиться к сессии" />
    </children>
 </AnchorPane>
Index: src/main/kotlin/com/example/cheat_project/ScreenShoter.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/kotlin/com/example/cheat_project/ScreenShoter.kt b/src/main/kotlin/com/example/cheat_project/ScreenShoter.kt
new file mode 100644
--- /dev/null	
+++ b/src/main/kotlin/com/example/cheat_project/ScreenShoter.kt	
@@ -0,0 +1,16 @@
+package com.example.cheat_project
+
+import kotlin.properties.Delegates
+
+class ScreenShoter {
+
+    init {
+        val thread = Thread{
+            startProccess()
+        }
+        thread.start()
+    }
+    private fun startProccess() {
+
+    }
+}
\ No newline at end of file
